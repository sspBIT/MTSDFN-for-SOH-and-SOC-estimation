import torch.nn as nnimport torch.nn.functional as Fimport torchclass Bottleneck(nn.Module):    def __init__(self, in_planes, kernel_size, planes, stride=1):        super(Bottleneck, self).__init__()        self.bottleneck1 = nn.Sequential(            nn.Conv2d(in_planes, planes, kernel_size=(1, kernel_size), stride=stride, padding=(0, int((kernel_size-1)/2))),            nn.BatchNorm2d(planes),            nn.ReLU(inplace=True),        )        self.bottleneck2 = nn.Sequential(            nn.Conv2d(in_planes, planes, kernel_size=(1, kernel_size), stride=stride,                      padding=(0, int((kernel_size - 1) / 2))),            nn.BatchNorm2d(planes),            nn.ReLU(inplace=True),        )        self.bottleneck3 = nn.Sequential(            nn.Conv2d(in_planes, planes, kernel_size=(1, kernel_size), stride=stride,                      padding=(0, int((kernel_size - 1) / 2))),            nn.BatchNorm2d(planes),            nn.ReLU(inplace=True),        )        self.relu = nn.ReLU(inplace=True)    def forward(self, x):        V, I, T = torch.chunk(x, 3, dim=2)        out1 = self.bottleneck1(V)        out2 = self.bottleneck2(I)        out3 = self.bottleneck3(T)        out = torch.cat((out1, out2, out3), dim=2)        out = self.relu(out)        return outclass GlobalAvgPool2d(nn.Module):    def __init__(self):        super(GlobalAvgPool2d, self).__init__()    def forward(self, x):        return F.avg_pool2d(x, kernel_size=x.size()[2:])class FlattenLayer(torch.nn.Module):    def __init__(self):        super(FlattenLayer, self).__init__()    def forward(self, x):        return x.view(x.shape[0], -1)class net_CNN(nn.Module):    def __init__(self):        super(net_test, self).__init__()        # 构建13个卷积层        self.layer1 = Bottleneck(1, 3, 4, 2)        self.layer2 = Bottleneck(4, 3, 4, 2)        self.layer3 = Bottleneck(4, 3, 4, 1)        self.layer4 = Bottleneck(4, 3, 4, 1)        self.layer5 = Bottleneck(4, 3, 4, 1)        self.layer6 = Bottleneck(4, 3, 8, 2)        self.layer7 = Bottleneck(8, 3, 8, 1)        self.layer8 = Bottleneck(8, 3, 8, 1)        self.layer9 = Bottleneck(8, 3, 8, 1)        self.layer10 = Bottleneck(8, 3, 16, 2)        self.layer11 = Bottleneck(16, 3, 16, 1)        self.layer12 = Bottleneck(16, 3, 16, 1)        self.layer13 = Bottleneck(16, 3, 16, 1)        # 全局平均池化        self.GAP = GlobalAvgPool2d()        self.Flatten = FlattenLayer()        # 全连接层        self.FC = nn.Linear(16, 3)    def forward(self, x):        c1 = self.layer1(x)        c2 = self.layer2(c1)        c3 = self.layer3(c2)        c4 = self.layer4(c3)        c5 = self.layer5(c4)        c6 = self.layer6(c5)        c7 = self.layer7(c6)        c8 = self.layer8(c7)        c9 = self.layer9(c8)        c10 = self.layer10(c9)        c11 = self.layer11(c10)        c12 = self.layer12(c11)        c13 = self.layer13(c12)        c14 = self.GAP(c13)        c14 = self.Flatten(c14)        out = self.FC(c14)        return out